Debian Linux contains the dieharder package to test 74
well known random number generators for their degree of
randomness.  To install the dieharder package, run the following
three commands as root.

apt-get install dieharder
apt-get install libdieharder-dev
apt-get install libdieharder3

One of the features in dieharder is to be able to generate random
32 bit integers with the following dieharder command.

dieharder -g nnn -t yyy -o

where nnn is the number of a random number generator
and yyy is the number of 32 bit integers to generate.

For example,

dieharder -g 053 -t 1000 -o

This command generates one thousand 32 bit integers using
the taus2 generator.  053 is the number of the taus2 generator.
To see all the generator numbers, run the following command.

dieharder -g -l

You will see the following list.

#=============================================================================#
#            dieharder version 3.31.1 Copyright 2003 Robert G. Brown          #
#=============================================================================#
#    Id Test Name           | Id Test Name           | Id Test Name           #
#=============================================================================#
|   000 borosh13            |001 cmrg                |002 coveyou             |
|   003 fishman18           |004 fishman20           |005 fishman2x           |
|   006 gfsr4               |007 knuthran            |008 knuthran2           |
|   009 knuthran2002        |010 lecuyer21           |011 minstd              |
|   012 mrg                 |013 mt19937             |014 mt19937_1999        |
|   015 mt19937_1998        |016 r250                |017 ran0                |
|   018 ran1                |019 ran2                |020 ran3                |
|   021 rand                |022 rand48              |023 random128-bsd       |
|   024 random128-glibc2    |025 random128-libc5     |026 random256-bsd       |
|   027 random256-glibc2    |028 random256-libc5     |029 random32-bsd        |
|   030 random32-glibc2     |031 random32-libc5      |032 random64-bsd        |
|   033 random64-glibc2     |034 random64-libc5      |035 random8-bsd         |
|   036 random8-glibc2      |037 random8-libc5       |038 random-bsd          |
|   039 random-glibc2       |040 random-libc5        |041 randu               |
|   042 ranf                |043 ranlux              |044 ranlux389           |
|   045 ranlxd1             |046 ranlxd2             |047 ranlxs0             |
|   048 ranlxs1             |049 ranlxs2             |050 ranmar              |
|   051 slatec              |052 taus                |053 taus2               |
|   054 taus113             |055 transputer          |056 tt800               |
|   057 uni                 |058 uni32               |059 vax                 |
|   060 waterman14          |061 zuf                 |                        |
#=============================================================================#
|   200 stdin_input_raw     |201 file_input_raw      |202 file_input          |
|   203 ca                  |204 uvag                |205 AES_OFB             |
|   206 Threefish_OFB       |207 XOR (supergenerator)|208 kiss                |
|   209 superkiss           |                        |                        |
#=============================================================================#
|   400 R_wichmann_hill     |401 R_marsaglia_multic. |402 R_super_duper       |
|   403 R_mersenne_twister  |404 R_knuth_taocp       |405 R_knuth_taocp2      |
#=============================================================================#
|   500 /dev/random         |501 /dev/urandom        |                        |
#=============================================================================#
#=============================================================================#

I ran the template test against these dieharder generators to
see how they performed.  The following results occured.  Those
generators with a maximum integer value of (2^32) - 1
passed the template test.  All the other generators failed
the template test.

------------------------------------------------------------

RNG Name               Result    Reason              MAXINT (hex)
--- ------             ------    --------           --------
000 borosh13           passes                       ffffffff
001 cmrg               fails     P-value = 1.0      7fffffff
002 coveyou            passes                       ffffffff
003 fishman18          fails     P-value = 1.0      7fffffff
004 fishman20          fails     P-value = 1.0      7fffffff
005 fishman2x          fails     P-value = 1.0      7fffffff
006 gfsr4              passes                       ffffffff
007 knuthran           fails     P-value = 1.0      3fffffff
008 knuthran2          fails     P-value = 1.0      7fffffff
009 knuthran2002       fails     P-value = 1.0      3fffffff
010 lecuyer21          fails     P-value = 1.0      7fffffff
011 minstd             fails     P-value = 1.0      7fffffff
012 mrg                fails     P-value = 1.0      7fffffff
013 mt19937            passes                       ffffffff
014 mt19937_1999       passes                       ffffffff
015 mt19937_1998       passes                       ffffffff
016 r250               passes                       ffffffff
017 ran0               fails     P-value = 1.0      7fffffff
018 ran1               fails     P-value = 1.0      7fffffff
019 ran2               fails     P-value = 1.0      7fffffff
020 ran3               fails     P-value = 1.0      decimal 999999999
021 rand               fails     P-value = 1.0      7fffffff
022 rand48             passes                       ffffffff
023 random128-bsd      fails     P-value = 1.0      7fffffff
024 random128-glibc2   fails     P-value = 1.0      7fffffff
025 random128-libc5    fails     P-value = 1.0      7fffffff
026 random256-bsd      fails     P-value = 1.0      7fffffff
027 random256-glibc2   fails     P-value = 1.0      7fffffff
028 random256-libc5    fails     P-value = 1.0      7fffffff
029 random32-bsd       fails     P-value = 1.0      7fffffff
030 random32-glibc2    fails     P-value = 1.0      7fffffff
031 random32-libc5     fails     P-value = 1.0      7fffffff
032 random64-bsd       fails     P-value = 1.0      7fffffff
033 random64-glibc2    fails     P-value = 1.0      7fffffff
034 random64-libc5     fails     P-value = 1.0      7fffffff
035 random8-bsd        fails     P-value = 1.0      7fffffff
036 random8-glibc2     fails     P-value = 1.0      7fffffff
037 random8-libc5      fails     P-value = 1.0      7fffffff
038 random-bsd         fails     P-value = 1.0      7fffffff
039 random-glibc2      fails     P-value = 1.0      7fffffff
040 random-libc5       fails     P-value = 1.0      7fffffff
041 randu              fails     P-value = 1.0      7fffffff
042 ranf               passes                       ffffffff
043 ranlux             aborts                         ffffff
044 ranlux389          aborts                         ffffff
045 ranlxd1            passes                       ffffffff
046 ranlxd2            passes                       ffffffff
047 ranlxs0            aborts                         ffffff
048 ranlxs1            aborts                         ffffff
049 ranlxs2            fails     wrap-around          ffffff
050 ranmar             aborts                         ffffff
051 slatec             aborts                         3fffff
052 taus               passes                       ffffffff
053 taus2              passes                       ffffffff
054 taus113            passes                       ffffffff
055 transputer         passes                       ffffffff
056 tt800              passes                       ffffffff
057 uni                aborts                           ffff
058 uni32              fails     P-value = 1.0      7fffffff
059 vax                passes                       ffffffff
060 waterman14         passes                       ffffffff
061 zuf                aborts                         ffffff
203 ca                 passes                       ffffffff
204 uvag               passes                       ffffffff
205 AES_OFB            passes                       ffffffff
206 Threefish_OFB      passes                       ffffffff
207 XOR                segmentation fault           ????????
208 kiss               passes                       ffffffff
209 superkiss          passes                       ffffffff
400 R_wichmann_hill    passes                       ffffffff
401 R_marsaglia_multic passes                       ffffffff
402 R_super_duper      passes                       ffffffff
403 R_mersenne_twister passes                       ffffffff
404 R_knuth_taocp      fails     P-value = 1.0      3fffffff
405 R_knuth_taocp2     fails     P-value = 1.0      3fffffff

------------------------------------------------------------

Then I added a table of maximum integers to the template
test.  To produce a uniform random number from 0 to 1
with the dieharder 32 bit integers, I had to divide each
integer by the maximum integer appropriate for its generator.
For instance for the cmrg generator, number 001, I divided
each integer by 0x7fffffff, which is (2^31) - 1.  All
dieharder generators passed the template test except for
the following three weak generators.

RNG Name               Result    Reason              MAXINT (hex)
--- ------             ------    --------           --------
041 randu              fails     P-value = 1.0      7fffffff
057 uni                fails     P-value = 1.0      ffff
207 XOR                segmentation fault           ????????

-----------------------------------------------------------------

The template test for the dieharder generators in this repository
is called dietmplt.c.  Its make file is dietmplt.mak.
The script for running the template test is called
dietmplt.sh.  The parameter for this test is the dieharder
generator number.  For example,

dietmplt.sh 001

This runs the template test sucessfully on the cmrg generator.

The script for finding the maximum integer for each generator
is called getmax.sh.  The parameter for this script is also
the dieharder generator number.  This script finds the highest
32 bit integer among one million sample integers produced by
dieharder.  For example,

getmax.sh 001

This example finds the maximum integer for the cmrg generator.

See README.md, TESTING, and INSTALL for more information about
this template repository.
